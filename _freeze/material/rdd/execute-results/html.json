{
  "hash": "f4640cc56aae22ba414a8ff5c19bac06",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"回帰不連続デザイン\"\ntoc: true\nmetadata-files: \n  - _material.yml\n---\n\n\n\n\n## スライド\n\n<a href=\"../slide/rdd.html\" class=\"btn btn-primary btn-sm\" target=\"_blank\" role=\"button\"><i class=\"bi bi-window\"></i> 新しいタブで開く</a>\n\n\n\n\n```{=html}\n<iframe class=\"slide-deck\" src=\"../slide/rdd.html\" width=\"100%\" style=\"aspect-ratio: 16 / 9.2;\"></iframe>\n```\n\n\n\n\n## セットアップ\n\n実習に必要なパッケージとデータセットを読み込む。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, rdd, rdrobust, rddensity, \n               summarytools, BalanceR)\n\ndf <- read_csv(\"data/rdd_data4.csv\")\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,266 × 7\n    year prefname outcome      rv total_cand en_cand total_votes\n   <dbl> <chr>      <dbl>   <dbl>      <dbl>   <dbl>       <dbl>\n 1  2000 Hokkaido    34.6 -10.8            4    2.75      261382\n 2  2003 Hokkaido    40.8 -10.4            3    2.29      259740\n 3  2005 Hokkaido    36.8  -2.45           4    2.60      313909\n 4  2009 Hokkaido    31.1  -8.72           4    2.29      337445\n 5  2012 Hokkaido    39.6   1.09           5    4.17      276894\n 6  2000 Hokkaido    35.3   2.52           6    4.19      244655\n 7  2003 Hokkaido    44.5  -5.13           5    2.86      236430\n 8  2005 Hokkaido    30.8  -0.407          3    2.42      285519\n 9  2009 Hokkaido    35.0 -11.7            5    2.50      304810\n10  2012 Hokkaido    38.8   5.87           5    4.17      239023\n# ℹ 1,256 more rows\n```\n\n\n:::\n:::\n\n\n\n\n分析に入る前に記述統計を確認する。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf |>\n  descr(stats = c(\"mean\", \"sd\", \"min\", \"max\", \"n.valid\"),\n        transpose = TRUE, order = \"p\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDescriptive Statistics  \ndf  \nN: 1266  \n\n                         Mean    Std.Dev         Min         Max   N.Valid\n----------------- ----------- ---------- ----------- ----------- ---------\n             year     2006.18       4.20     2000.00     2012.00   1266.00\n          outcome       47.02      11.65       13.26       84.50   1266.00\n               rv        3.58      10.20      -23.76       36.31   1266.00\n       total_cand        3.76       0.95        2.00        9.00   1266.00\n          en_cand        2.55       0.59        1.37        5.35   1266.00\n      total_votes   214025.95   42366.82   104398.00   339780.00   1266.00\n```\n\n\n:::\n:::\n\n\n\n\n## 処置効果の推定\n\n　因果効果の推定は{rdd}パッケージの`RDestimate()`関数、あるいは{rdrobust}パッケージの`rdrobust()`を使う。機能面では{rdrobust}の方が優れているものの、パッケージの使いやすさとしては{rdd}の方が優れている。本講義では頑健な推定方法については紹介しなかったものの、近年は{rdrobust}がより使われているため、ここでも{rdrobust}を使用する。いずれのパッケージも自動的に最適バンド幅を設定し[^1]、**交差項**が含まれた局所**線形**回帰分析を行った結果を返してくれる[^2]。また、デフォルトのカーネルは三角 (triangular)カーネル関数だ。\n\n[^1]: もし、自分でバンド幅を指定したい場合、`bw = ...`の引数を加える。\n\n[^2]: 閾値のデフォルトは0だ。もし、閾値が0ではない場合、`cutpoint = ...`の引数を設定する。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrdd_fit1 <- rdrobust(y = df$outcome, x = df$rv, c = 0)\n\nsummary(rdd_fit1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                       mserd\nKernel                   Triangular\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             318          381\nOrder est. (p)                    1            1\nOrder bias  (q)                   2            2\nBW est. (h)                   8.064        8.064\nBW bias (b)                  12.613       12.613\nrho (h/b)                     0.639        0.639\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional     0.725     1.580     0.459     0.646    [-2.371 , 3.820]     \n        Robust         -         -     0.528     0.598    [-2.692 , 4.677]     \n=============================================================================\n```\n\n\n:::\n:::\n\n\n\n\n　最適バンド幅は8.064であり、処置効果は約0.725である。これは自民党候補者の投票率から非自民候補者の最高得票率を引いた値（`rv`）が-8.064から8.064までのデータを使うことを意味する。そして、これらのデータに対して交差項が含まれる線形回帰分析を行うことになる。また、閾値周辺に重みを付けるために三角カーネル関数による重み付けを行った。\n\n　結果として現職は新人に比べ、約72.5%ポイント得票率が高いという結果が得られたが、標準誤差はかなり大きく、必ずしも現職が新人より得票するとは言えないだろう（$p$ = 0.646）。今回の推定結果から日本における現職効果について、**統計的**に有意な効果は確認できない。\n\n## 頑健性の確認\n\n　RDDで（局所）処置効果を推定する際、分析する側はバンド幅、カーネル関数、モデル（一次関数か、二次関数かなど）を決める必要がある。これらは恣意的なものであるため、これらを少し変更しても推定値が安定しているか、つまりどれほど頑健かを確認する必要がある。\n\n### バンド幅\n\n　`rdrobust()`の場合、基本的には最適バンド幅を使うことになるが、`h`引数を使って任意のバンド幅を指定することもできる。たとえば、既に得られた最適バンド幅8.064を使って推定してみよう。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrdd_bw1 <- rdrobust(y = df$outcome, x = df$rv, c = 0, h = 8.064)\n\nsummary(rdd_bw1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                      Manual\nKernel                   Triangular\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             318          381\nOrder est. (p)                    1            1\nOrder bias  (q)                   2            2\nBW est. (h)                   8.064        8.064\nBW bias (b)                   8.064        8.064\nrho (h/b)                     1.000        1.000\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional     0.725     1.580     0.459     0.646    [-2.371 , 3.820]     \n        Robust         -         -     0.013     0.990    [-4.461 , 4.521]     \n=============================================================================\n```\n\n\n:::\n:::\n\n\n\n\n　先ほどと同じ結果が得られている（Robust行はこの講義では無視する。Robust推定値についてはCalonico et al. (2015)を参照されたい[^cct2015]。）。頑健性を報告する際は最適バンド幅における処置効果に加え、最適バンド幅を半分にした場合、2倍にした場合の結果も報告するケースが多い。それでは`h`を8.064の半分、2倍にしたモデルも推定してみよう。\n\n[^cct2015]: Calonico, S., M. D. Cattaneo, and R. Titiunik. 2015b. \"rdrobust: An R Package for Robust Nonparametric Inference in Regression-Discontinuity Designs,\" *R Journal,* 7(1): 38-51.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrdd_bw2 <- rdrobust(y = df$outcome, x = df$rv, c = 0, h = 8.064 / 2)\n\nsummary(rdd_bw2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                      Manual\nKernel                   Triangular\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             188          185\nOrder est. (p)                    1            1\nOrder bias  (q)                   2            2\nBW est. (h)                   4.032        4.032\nBW bias (b)                   4.032        4.032\nrho (h/b)                     1.000        1.000\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional     0.162     2.205     0.074     0.941    [-4.160 , 4.485]     \n        Robust         -         -     0.316     0.752    [-5.326 , 7.375]     \n=============================================================================\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrdd_bw3 <- rdrobust(y = df$outcome, x = df$rv, c = 0, h = 8.064 * 2)\n\nsummary(rdd_bw3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                      Manual\nKernel                   Triangular\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             453          650\nOrder est. (p)                    1            1\nOrder bias  (q)                   2            2\nBW est. (h)                  16.128       16.128\nBW bias (b)                  16.128       16.128\nrho (h/b)                     1.000        1.000\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional    -0.006     1.141    -0.005     0.996    [-2.242 , 2.229]     \n        Robust         -         -     0.580     0.562    [-2.309 , 4.250]     \n=============================================================================\n```\n\n\n:::\n:::\n\n\n\n\n　いずれも統計的に有意な処置効果は得られない。これらの結果をまとめると以下のよるになる。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbw_compare <- tibble(Bandwidth = c(\"Half\", \"Optimal\", \"Double\"),\n                     LATE      = c(0.162, 0.725, -0.006),\n                     lower     = c(-4.160, -2.371, -2.242),\n                     upper     = c(4.485, 3.820, 2.2249))\n\nbw_compare\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  Bandwidth   LATE lower upper\n  <chr>      <dbl> <dbl> <dbl>\n1 Half       0.162 -4.16  4.49\n2 Optimal    0.725 -2.37  3.82\n3 Double    -0.006 -2.24  2.22\n```\n\n\n:::\n:::\n\n\n\n\n　これらをpoint-rangeプロットで可視化してみよう。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbw_compare |>\n  mutate(Bandwidth = fct_inorder(Bandwidth)) |>\n  ggplot() +\n  geom_hline(yintercept = 0) +\n  geom_pointrange(aes(x = Bandwidth, y = LATE, \n                      ymin = lower, ymax = upper)) +\n  theme_bw(base_size = 12) \n```\n\n::: {.cell-output-display}\n![](rdd_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=1050}\n:::\n:::\n\n\n\n\n### カーネル\n\n　カーネル関数は`kernel`引数で指定することができる。指定しない場合、既定値として`kernel = \"triangular\"`になるが、他にも`\"uniform\"`と`\"epanechnikov\"`がある。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrdd_kernel1 <- rdrobust(y = df$outcome, x = df$rv, c = 0, \n                        kernel = \"triangular\")\nrdd_kernel2 <- rdrobust(y = df$outcome, x = df$rv, c = 0, \n                        kernel = \"uniform\")\nrdd_kernel3 <- rdrobust(y = df$outcome, x = df$rv, c = 0, \n                        kernel = \"epanechnikov\")\n\nsummary(rdd_kernel1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                       mserd\nKernel                   Triangular\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             318          381\nOrder est. (p)                    1            1\nOrder bias  (q)                   2            2\nBW est. (h)                   8.064        8.064\nBW bias (b)                  12.613       12.613\nrho (h/b)                     0.639        0.639\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional     0.725     1.580     0.459     0.646    [-2.371 , 3.820]     \n        Robust         -         -     0.528     0.598    [-2.692 , 4.677]     \n=============================================================================\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(rdd_kernel2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                       mserd\nKernel                      Uniform\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             245          264\nOrder est. (p)                    1            1\nOrder bias  (q)                   2            2\nBW est. (h)                   5.651        5.651\nBW bias (b)                  10.115       10.115\nrho (h/b)                     0.559        0.559\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional     0.611     1.699     0.360     0.719    [-2.718 , 3.941]     \n        Robust         -         -     0.516     0.606    [-2.878 , 4.933]     \n=============================================================================\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(rdd_kernel3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                       mserd\nKernel                   Epanechnikov\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             298          349\nOrder est. (p)                    1            1\nOrder bias  (q)                   2            2\nBW est. (h)                   7.420        7.420\nBW bias (b)                  12.211       12.211\nrho (h/b)                     0.608        0.608\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional     0.722     1.586     0.455     0.649    [-2.387 , 3.832]     \n        Robust         -         -     0.560     0.575    [-2.633 , 4.740]     \n=============================================================================\n```\n\n\n:::\n:::\n\n\n\n\n　以上の結果をまとめたものが以下である。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nkernel_compare <- tibble(Kernel = c(\"Triangular\", \n                                    \"Unifrom\", \n                                    \"Epanechnikov\"),\n                         LATE   = c(0.725, 0.611, 0.722),\n                         lower  = c(-2.371, -2.718, -2.387),\n                         upper  = c(3.820, 3.941, 3.832))\n\nkernel_compare\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  Kernel        LATE lower upper\n  <chr>        <dbl> <dbl> <dbl>\n1 Triangular   0.725 -2.37  3.82\n2 Unifrom      0.611 -2.72  3.94\n3 Epanechnikov 0.722 -2.39  3.83\n```\n\n\n:::\n\n```{.r .cell-code}\nkernel_compare |>\n  mutate(Kernel = fct_inorder(Kernel)) |>\n  ggplot() +\n  geom_hline(yintercept = 0) +\n  geom_pointrange(aes(x = Kernel, y = LATE, \n                      ymin = lower, ymax = upper)) +\n  theme_bw(base_size = 12) \n```\n\n::: {.cell-output-display}\n![](rdd_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=1050}\n:::\n:::\n\n\n\n\n### 関数\n\n　パラメトリック推定、またはセミパラメトリック推定の場合、応答変数と強制変数間の関係をある関数として仮定する必要がある。セミパラメトリック推定は関数設定の影響力が比較的小さいが、バンド幅内のケース数が少なくなると、関数の形に影響を受けやすい。ここでは1次関数から4次関数までモデルを変えながら、推定値が安定しているかを確認してみよう。`rdrobust()`で関数の次数を指定するためには`p`引数を使用する。既定値は1であるが、`p`次関数を使う場合は`p`を指定する必要がある。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrdd_p1 <- rdrobust(y = df$outcome, x = df$rv, c = 0, p = 1)\nrdd_p2 <- rdrobust(y = df$outcome, x = df$rv, c = 0, p = 2)\nrdd_p3 <- rdrobust(y = df$outcome, x = df$rv, c = 0, p = 3)\nrdd_p4 <- rdrobust(y = df$outcome, x = df$rv, c = 0, p = 4)\n\nsummary(rdd_p1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                       mserd\nKernel                   Triangular\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             318          381\nOrder est. (p)                    1            1\nOrder bias  (q)                   2            2\nBW est. (h)                   8.064        8.064\nBW bias (b)                  12.613       12.613\nrho (h/b)                     0.639        0.639\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional     0.725     1.580     0.459     0.646    [-2.371 , 3.820]     \n        Robust         -         -     0.528     0.598    [-2.692 , 4.677]     \n=============================================================================\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(rdd_p2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                       mserd\nKernel                   Triangular\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             358          433\nOrder est. (p)                    2            2\nOrder bias  (q)                   3            3\nBW est. (h)                   9.205        9.205\nBW bias (b)                  12.622       12.622\nrho (h/b)                     0.729        0.729\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional     0.260     2.139     0.122     0.903    [-3.931 , 4.452]     \n        Robust         -         -    -0.030     0.976    [-4.804 , 4.661]     \n=============================================================================\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(rdd_p3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                       mserd\nKernel                   Triangular\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             379          476\nOrder est. (p)                    3            3\nOrder bias  (q)                   4            4\nBW est. (h)                  10.311       10.311\nBW bias (b)                  13.458       13.458\nrho (h/b)                     0.766        0.766\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional    -0.389     2.676    -0.145     0.884    [-5.633 , 4.855]     \n        Robust         -         -    -0.240     0.811    [-6.462 , 5.055]     \n=============================================================================\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(rdd_p4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                       mserd\nKernel                   Triangular\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             420          567\nOrder est. (p)                    4            4\nOrder bias  (q)                   5            5\nBW est. (h)                  12.653       12.653\nBW bias (b)                  15.671       15.671\nrho (h/b)                     0.807        0.807\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional    -0.472     3.002    -0.157     0.875    [-6.356 , 5.411]     \n        Robust         -         -    -0.124     0.902    [-6.776 , 5.972]     \n=============================================================================\n```\n\n\n:::\n:::\n\n\n\n\n　以上の結果をまとめたものが以下である。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\norder_compare <- tibble(Order = 1:4,\n                        LATE  = c(0.725, 0.260, -0.389, -0.472),\n                        lower = c(-2.371, -3.931, -5.633, -6.356),\n                        upper = c(3.820, 4.452, 4.855, 5.411))\n\norder_compare\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  Order   LATE lower upper\n  <int>  <dbl> <dbl> <dbl>\n1     1  0.725 -2.37  3.82\n2     2  0.26  -3.93  4.45\n3     3 -0.389 -5.63  4.86\n4     4 -0.472 -6.36  5.41\n```\n\n\n:::\n\n```{.r .cell-code}\norder_compare |>\n  ggplot() +\n  geom_hline(yintercept = 0) +\n  geom_pointrange(aes(x = Order, y = LATE, \n                      ymin = lower, ymax = upper)) +\n  labs(x = \"Order of Local Polynomial Regression\") +\n  theme_bw(base_size = 12) \n```\n\n::: {.cell-output-display}\n![](rdd_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=1050}\n:::\n:::\n\n\n\n\n　結果は大きく変わらず、安定していることが分かる。\n\n## 可視化\n\n　{rdrobust}パッケージには可視化に便利な`rdplot()`関数が用意されている。使い方は`rdrobust()`とほぼ同じで、`y`には応答変数を、`x`には強制変数、`c`には閾値を指定すれば良い。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrdplot(y = df$outcome, x = df$rv, c = 0)\n```\n\n::: {.cell-output-display}\n![](rdd_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=1050}\n:::\n:::\n\n\n\n\n　観測値が少ないように見えるが、これは強制変数を区間に分け、区間内の平均値を示したものである。通常のRDDはサンプルサイズが大きいため、散布図+回帰直線（曲線）だと線が見えなかったり、傾向が見にくくなる傾向がある。サンプルサイズが数百程度なら全観測値を見せても良いだろうが、今回は1200以上であり、このような見せ方が効果的である。\n\n　1つ注意すべき点は、表示される回帰直線（曲線）の場合、2次関数が使用される。1次関数にフィットさせるためには、`rdrobust()`同様、`p = 1`を指定すれば良い。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrdplot(y = df$outcome, x = df$rv, c = 0, p = 1)\n```\n\n::: {.cell-output-display}\n![](rdd_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=1050}\n:::\n:::\n\n\n\n\n　また、この回帰直線の場合、カーネル関数は矩形関数である。三角形関数にするためには、更に`kernel = \"triangular\"`を指定する。また、`x.lab`、`y.lab`、`title`引数でラベルを修正することもできる。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrdplot(y = df$outcome, x = df$rv, c = 0, p = 1,\n       kernel = \"triangular\",\n       x.label = \"Vote Margin in Election t\",\n       y.label = \"Vote Share in Election t+1\",\n       title = \"\")\n```\n\n::: {.cell-output-display}\n![](rdd_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=1050}\n:::\n:::\n\n\n\n\n　以上の例は、バンド幅を設定せず、全観測値を利用したものである。`rdrobust()`のようにバンド幅を指定することはできないため、`subset`引数を使って使用するデータを制限することができる。たとえば、`rv`が-15より大きく、15より小さいケースのみを使う場合、`subset = (df$rv > -15 & df$rv < 15)`と指定すれば良い。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrdplot(y = df$outcome, x = df$rv, c = 0, p = 1,\n       kernel = \"triangular\", \n       subset = (df$rv > -15 & df$rv < 15),\n       x.label = \"Vote Margin in Election t\",\n       y.label = \"Vote Share in Election t+1\",\n       title = \"\")\n```\n\n::: {.cell-output-display}\n![](rdd_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=1050}\n:::\n:::\n\n\n\n\n## 仮定の確認\n\n### 交絡要因の連続性\n\n　RDDの重要な仮定の一つとして、交絡要因の連続性がある。交絡要因として考えられる要因が、処置群に割り当てられることでジャンプした場合、観察される処置効果がが処置によるものか、交絡要因のジャンブによるものかが識別できないからだ。今回の例では処置効果が見られていないが、それでもこの仮定は確認する価値がある。処置による効果（$X \\rightarrow Y$）と交絡要因による効果（$Z \\rightarrow Y$）が両方存在するケースを考えてみよう。もしこの2つの効果の符号が逆である場合、処置効果（$X \\rightarrow Y$）が交絡要因による効果（$Z \\rightarrow Y$）に相殺される可能性もあるからだ。\n\n　確認する方法は簡単だ。もう一度RDDをするだけだ。ただし、応答変数が得票率（`outcome`）でなく、交絡要因に代わるだけだ。今回は候補者数（`total_cand`）、有効候補者数（`en_cand`）、得票数（`total_votes`）に対してRDDを行ってみよう。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nassumption_fit1 <- rdrobust(y = df$total_cand, x = df$rv)\nassumption_fit2 <- rdrobust(y = df$en_cand, x = df$rv)\nassumption_fit3 <- rdrobust(y = df$total_votes, x = df$rv)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(assumption_fit1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                       mserd\nKernel                   Triangular\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             243          261\nOrder est. (p)                    1            1\nOrder bias  (q)                   2            2\nBW est. (h)                   5.547        5.547\nBW bias (b)                   8.621        8.621\nrho (h/b)                     0.643        0.643\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional    -0.066     0.209    -0.315     0.753    [-0.475 , 0.344]     \n        Robust         -         -    -0.415     0.678    [-0.593 , 0.385]     \n=============================================================================\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(assumption_fit2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                       mserd\nKernel                   Triangular\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             280          314\nOrder est. (p)                    1            1\nOrder bias  (q)                   2            2\nBW est. (h)                   6.629        6.629\nBW bias (b)                  10.114       10.114\nrho (h/b)                     0.655        0.655\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional     0.032     0.111     0.289     0.772    [-0.186 , 0.251]     \n        Robust         -         -     0.149     0.881    [-0.242 , 0.282]     \n=============================================================================\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(assumption_fit3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSharp RD estimates using local polynomial regression.\n\nNumber of Obs.                 1266\nBW type                       mserd\nKernel                   Triangular\nVCE method                       NN\n\nNumber of Obs.                  479          787\nEff. Number of Obs.             291          341\nOrder est. (p)                    1            1\nOrder bias  (q)                   2            2\nBW est. (h)                   7.131        7.131\nBW bias (b)                  11.445       11.445\nrho (h/b)                     0.623        0.623\nUnique Obs.                     479          787\n\n=============================================================================\n        Method     Coef. Std. Err.         z     P>|z|      [ 95% C.I. ]       \n=============================================================================\n  Conventional  1222.634  7020.544     0.174     0.862[-12537.380 , 14982.648] \n        Robust         -         -     0.042     0.967[-16145.541 , 16846.362] \n=============================================================================\n```\n\n\n:::\n:::\n\n\n\n\n　いずれも統計的に有意なジャンプは見られない。以上の検定結果から「仮定は満たされている」ことは主張できないものの、「仮定が満たされていないとは言えない」までは主張できるはずだ。\n\n### バランスチェック\n\n　ノンパラメトリックRDDの場合、バンド幅内であれば、処置群と統制群の性質はほぼ同じであると仮定する。つまり、処置変数を除く共変量が処置群と統制群の間において均質であることを意味する。それでは{BalanceR}を使って、候補者数（`total_cand`）、有効候補者数（`en_cand`）、得票数（`total_votes`）が処置群と統制群の間に差があるかを確認してみよう。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf |>\n  # 処置の有無を示す treat 変数を作成\n  mutate(treat = if_else(rv > 0, \"yes\", \"no\")) |>\n  BalanceR(group = treat,\n           cov = total_cand:total_votes) |>\n  plot(abs = TRUE) +\n  scale_y_discrete(label = c(\"total_cand\" = \"Total number of candidates\",\n                             \"en_cand\" = \"Effective number of candidates\",\n                             \"total_votes\" = \"Total votes\"))\n```\n\n::: {.cell-output-display}\n![](rdd_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=1050}\n:::\n:::\n\n\n\n\n　得票数（`total_votes`）の場合、標準化差分が非常に大きいことが分かる。それではバンド幅内のサンプルに限定すればどうだろうか。`filter()`を使って`rv`が-8.064より大きく、8.064より小さいサンプルに絞っってバランスチェックをしてみよう。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf |>\n  mutate(treat = if_else(rv > 0, \"yes\", \"no\")) |>\n  filter(rv > -8.064 & rv < 8.064) |>\n  BalanceR(group = treat,\n           cov = total_cand:total_votes) |>\n  plot(abs = TRUE) +\n  scale_y_discrete(label = c(\"total_cand\" = \"Total number of candidates\",\n                             \"en_cand\" = \"Effective number of candidates\",\n                             \"total_votes\" = \"Total votes\"))\n```\n\n::: {.cell-output-display}\n![](rdd_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=1050}\n:::\n:::\n\n\n\n\n　有効候補者数（`en_cand`）のバランスがむしろ悪くなったものの、他の2つの変数のバランスは改善されていることが分かる。\n\n### 強制変数の操作可能性\n\n　RDDのもう一つの重要な仮定として、閾値周辺において強制変数の操作が行われてはいけない。得票率の差を操作することは極めて困難なので、今回は問題はないと考えられるが、たとえばフランス地方議会選挙のように人口によって制度が変わる場合、特定の選挙制度を採用するために人口を操作することは不可能ではないだろう。\n\n　この仮定を確認、検定する手法がMcCrayの密度検定 (density test)だ (McCray 2006)[^mccray]。簡単に説明すると、強制変数の密度関数が閾値周辺においてジャンプしているか否かを確認する方法である。もし、操作が行われているとしたら、密度関数が断絶するだろう。\n\n[^mccray]: [McCray, Justin. 2008. \"Manipulation of the running variable in the regression discontinuity design: A density test,\" *Journal of Econometrics,* 142(2): 698-714.](https://doi.org/10.1016/j.jeconom.2007.05.005)\n\n　密度検定は{rdd}の`DCdensity()`で簡単に行うことができる。第一引数は強制変数を、`cutpoint`には閾値を指定する（既定値は0であるため、今回は省略可能）。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nDCdensity(df$rv, cutpoint = 0)\n```\n\n::: {.cell-output-display}\n![](rdd_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=1050}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3002424\n```\n\n\n:::\n:::\n\n\n\n\n　図と長さ1のnumeric型ベクトルが出力されるが[^dcdensity-plot]、図は密度分布を可視化したものであり、数値は「密度関数は連続している」という帰無仮説に対する$p$値である。これが$\\alpha$（通常、$\\alpha = 0.05$）を下回る場合、帰無仮説は棄却され、密度関数が断絶していると判断できる。つまり、RDDの仮定を満たしていないことを意味する。\n\n[^dcdensity-plot]: 図が不要なら`plot = FALSE`を指定する。\n\n　{rdd}の`DCdensity()`以外にも、密度検定専用のパッケージ{rddenstiy}の`rddensity()`を使うことも可能だ。検定方法は基本的に同じだが、検定の際に使用するパラメーターや標準誤差計算のアルゴリズムが異なるため、結果はやや異なる。使い方は`X`に強制変数を、`c`に閾値を指定すれば良い。他にも十数種類のパラメーターが指定できるが詳細はコンソール上で`?rddensity`を入力し、ヘルプを参照すること。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nDensity_Test <- rddensity(X = df$rv, c = 0)\nsummary(Density_Test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nManipulation testing using local polynomial density estimation.\n\nNumber of obs =       1266\nModel =               unrestricted\nKernel =              triangular\nBW method =           estimated\nVCE method =          jackknife\n\nc = 0                 Left of c           Right of c          \nNumber of obs         479                 787                 \nEff. Number of obs    259                 289                 \nOrder est. (p)        2                   2                   \nOrder bias (q)        3                   3                   \nBW est. (h)           6.112               6.078               \n\nMethod                T                   P > |T|             \nRobust                -0.818              0.4134              \n\n\nP-values of binomial tests (H0: p=0.5).\n\nWindow Length / 2          <c     >=c    P>|T|\n0.448                      20      24    0.6516\n0.896                      41      41    1.0000\n1.343                      65      59    0.6536\n1.791                      89      79    0.4876\n2.239                     108      98    0.5307\n2.687                     129     116    0.4434\n3.134                     151     135    0.3751\n3.582                     168     163    0.8260\n4.030                     188     185    0.9175\n4.478                     200     204    0.8814\n```\n\n\n:::\n:::\n\n\n\n\n　密度検定の結果（$p$値）は中間辺りにある`# Robust`行の0.4134だ。ここでも帰無仮説は棄却されず、強制変数の操作が行われているとは言えない。これらの結果を可視化の際は`rdplotdensity()`関数を使う。第一引数は`rddensity()`から得られたオブジェクト名を指定し、`X`には強制変数を指定する。その他の引数についてはヘルプ（コンソール上で`?rdplotdensity`）を参照すること。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nDensity_Plot <- rdplotdensity(Density_Test, X = df$rv, \n                              type = \"both\", lwd = 1, pwd = 3, pty = 19)\n```\n\n::: {.cell-output-display}\n![](rdd_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=1050}\n:::\n:::\n\n\n\n\n　また、要約結果の下段にあるBinomial testsは密度分布に代わるもう一つの検定手法だ。1行目はケースが20個入る範囲と、その中での処置群と統制群の大きさ、そしてその差の検定である。ここでは0.215だが、これは`rv`が-0.215から0.215の間に20個のケースがあるということを意味する。統制群は7ケース、処置群は13ケースである。もし、強制変数の操作が行われなかったのであれば、処置群の割合は0.5になるはずである。右の`P>|T|`列は、$p = 0.5$を帰無仮説とした二項検定における$p$値である。もし、この値が$\\alpha$を下回ると、閾値周辺において何らかの操作が行われた可能性があることを示唆する。\n\n　2行目は1行目の幅を2倍に、3行目は1行目の幅を3倍に、...したものである。いずれも$p$値は0.05以上であり、強制変数の操作が行われたとは言えない。",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}