---
title: "回帰不連続デザイン"
toc: true
link-external-icon: true
link-external-newwindow: true
code-line-numbers: true
---

## スライド

<a href="../slide/rdd.html" class="btn btn-primary btn-sm" target="_blank" role="button"><i class="bi bi-window"></i> 新しいタブで開く</a>

```{=html}
<iframe class="slide-deck" src="../slide/rdd.html" width="100%" style="aspect-ratio: 16 / 9.2;"></iframe>
```

## セットアップ

```{r}
#| include: false
knitr::opts_chunk$set(dev       = "ragg_png",
                      dpi       = 300,
                      fig.align = "center",
                      message   = FALSE,
                      warning   = FALSE)
```

実習に必要なパッケージとデータセットを読み込む。

```{r}
pacman::p_load(tidyverse, rdd, rdrobust, rddensity, 
               summarytools, BalanceR)

df <- read_csv("data/rdd_data4.csv")

df
```

分析に入る前に記述統計を確認する。

```{r}
df |>
  descr(stats = c("mean", "sd", "min", "max", "n.valid"),
        transpose = TRUE, order = "p")
```

## 処置効果の推定

　因果効果の推定は{rdd}パッケージの`RDestimate()`関数、あるいは{rdrobust}パッケージの`rdrobust()`を使う。機能面では{rdrobust}の方が優れているものの、パッケージの使いやすさとしては{rdd}の方が優れている。本講義では頑健な推定方法については紹介しなかったものの、近年は{rdrobust}がより使われているため、ここでも{rdrobust}を使用する。いずれのパッケージも自動的に最適バンド幅を設定し[^1]、**交差項**が含まれた局所**線形**回帰分析を行った結果を返してくれる[^2]。また、デフォルトのカーネルは三角 (triangular)カーネル関数だ。

[^1]: もし、自分でバンド幅を指定したい場合、`bw = ...`の引数を加える。

[^2]: 閾値のデフォルトは0だ。もし、閾値が0ではない場合、`cutpoint = ...`の引数を設定する。

```{r}
rdd_fit1 <- rdrobust(y = df$outcome, x = df$rv, c = 0)

summary(rdd_fit1)
```

　最適バンド幅は`r round(rdd_fit1$bws[1], 3)`であり、処置効果は約`r round(rdd_fit1$Estimate[1], 3)`である。これは自民党候補者の投票率から非自民候補者の最高得票率を引いた値（`rv`）が`r -1 * round(rdd_fit1$bws[1], 3)`から`r round(rdd_fit1$bws[1], 3)`までのデータを使うことを意味する。そして、これらのデータに対して交差項が含まれる線形回帰分析を行うことになる。また、閾値周辺に重みを付けるために三角カーネル関数による重み付けを行った。

　結果として現職は新人に比べ、約`r round(rdd_fit1$Estimate[1], 3)*100`%ポイント得票率が高いという結果が得られたが、標準誤差はかなり大きく、必ずしも現職が新人より得票するとは言えないだろう（$p$ = `r round(rdd_fit1$pv[1], 3)`）。今回の推定結果から日本における現職効果について、**統計的**に有意な効果は確認できない。

## 頑健性の確認

　RDDで（局所）処置効果を推定する際、分析する側はバンド幅、カーネル関数、モデル（一次関数か、二次関数かなど）を決める必要がある。これらは恣意的なものであるため、これらを少し変更しても推定値が安定しているか、つまりどれほど頑健かを確認する必要がある。

### バンド幅

　`rdrobust()`の場合、基本的には最適バンド幅を使うことになるが、`h`引数を使って任意のバンド幅を指定することもできる。たとえば、既に得られた最適バンド幅8.064を使って推定してみよう。

```{r}
rdd_bw1 <- rdrobust(y = df$outcome, x = df$rv, c = 0, h = 8.064)

summary(rdd_bw1)
```

　先ほどと同じ結果が得られている（Robust行はこの講義では無視する。Robust推定値についてはCalonico et al. (2015)を参照されたい[^cct2015]。）。頑健性を報告する際は最適バンド幅における処置効果に加え、最適バンド幅を半分にした場合、2倍にした場合の結果も報告するケースが多い。それでは`h`を8.064の半分、2倍にしたモデルも推定してみよう。

[^cct2015]: Calonico, S., M. D. Cattaneo, and R. Titiunik. 2015b. "rdrobust: An R Package for Robust Nonparametric Inference in Regression-Discontinuity Designs," *R Journal,* 7(1): 38-51.

```{r}
rdd_bw2 <- rdrobust(y = df$outcome, x = df$rv, c = 0, h = 8.064 / 2)

summary(rdd_bw2)
```

```{r}
rdd_bw3 <- rdrobust(y = df$outcome, x = df$rv, c = 0, h = 8.064 * 2)

summary(rdd_bw3)
```

　いずれも統計的に有意な処置効果は得られない。これらの結果をまとめると以下のよるになる。

```{r}
bw_compare <- tibble(Bandwidth = c("Half", "Optimal", "Double"),
                     LATE      = c(0.162, 0.725, -0.006),
                     lower     = c(-4.160, -2.371, -2.242),
                     upper     = c(4.485, 3.820, 2.2249))

bw_compare
```

　これらをpoint-rangeプロットで可視化してみよう。

```{r}
bw_compare |>
  mutate(Bandwidth = fct_inorder(Bandwidth)) |>
  ggplot() +
  geom_hline(yintercept = 0) +
  geom_pointrange(aes(x = Bandwidth, y = LATE, 
                      ymin = lower, ymax = upper)) +
  theme_bw(base_size = 12) 
```

### カーネル

　カーネル関数は`kernel`引数で指定することができる。指定しない場合、既定値として`kernel = "triangular"`になるが、他にも`"uniform"`と`"epanechnikov"`がある。

```{r}
rdd_kernel1 <- rdrobust(y = df$outcome, x = df$rv, c = 0, 
                        kernel = "triangular")
rdd_kernel2 <- rdrobust(y = df$outcome, x = df$rv, c = 0, 
                        kernel = "uniform")
rdd_kernel3 <- rdrobust(y = df$outcome, x = df$rv, c = 0, 
                        kernel = "epanechnikov")

summary(rdd_kernel1)
summary(rdd_kernel2)
summary(rdd_kernel3)
```

　以上の結果をまとめたものが以下である。

```{r}
kernel_compare <- tibble(Kernel = c("Triangular", 
                                    "Unifrom", 
                                    "Epanechnikov"),
                         LATE   = c(0.725, 0.611, 0.722),
                         lower  = c(-2.371, -2.718, -2.387),
                         upper  = c(3.820, 3.941, 3.832))

kernel_compare

kernel_compare |>
  mutate(Kernel = fct_inorder(Kernel)) |>
  ggplot() +
  geom_hline(yintercept = 0) +
  geom_pointrange(aes(x = Kernel, y = LATE, 
                      ymin = lower, ymax = upper)) +
  theme_bw(base_size = 12) 
```

### 関数

　パラメトリック推定、またはセミパラメトリック推定の場合、応答変数と強制変数間の関係をある関数として仮定する必要がある。セミパラメトリック推定は関数設定の影響力が比較的小さいが、バンド幅内のケース数が少なくなると、関数の形に影響を受けやすい。ここでは1次関数から4次関数までモデルを変えながら、推定値が安定しているかを確認してみよう。`rdrobust()`で関数の次数を指定するためには`p`引数を使用する。既定値は1であるが、`p`次関数を使う場合は`p`を指定する必要がある。

```{r}
rdd_p1 <- rdrobust(y = df$outcome, x = df$rv, c = 0, p = 1)
rdd_p2 <- rdrobust(y = df$outcome, x = df$rv, c = 0, p = 2)
rdd_p3 <- rdrobust(y = df$outcome, x = df$rv, c = 0, p = 3)
rdd_p4 <- rdrobust(y = df$outcome, x = df$rv, c = 0, p = 4)

summary(rdd_p1)
summary(rdd_p2)
summary(rdd_p3)
summary(rdd_p4)
```

　以上の結果をまとめたものが以下である。

```{r}
order_compare <- tibble(Order = 1:4,
                        LATE  = c(0.725, 0.260, -0.389, -0.472),
                        lower = c(-2.371, -3.931, -5.633, -6.356),
                        upper = c(3.820, 4.452, 4.855, 5.411))

order_compare

order_compare |>
  ggplot() +
  geom_hline(yintercept = 0) +
  geom_pointrange(aes(x = Order, y = LATE, 
                      ymin = lower, ymax = upper)) +
  labs(x = "Order of Local Polynomial Regression") +
  theme_bw(base_size = 12) 
```

　結果は大きく変わらず、安定していることが分かる。

## 可視化

　{rdrobust}パッケージには可視化に便利な`rdplot()`関数が用意されている。使い方は`rdrobust()`とほぼ同じで、`y`には応答変数を、`x`には強制変数、`c`には閾値を指定すれば良い。

```{r}
rdplot(y = df$outcome, x = df$rv, c = 0)
```

　観測値が少ないように見えるが、これは強制変数を区間に分け、区間内の平均値を示したものである。通常のRDDはサンプルサイズが大きいため、散布図+回帰直線（曲線）だと線が見えなかったり、傾向が見にくくなる傾向がある。サンプルサイズが数百程度なら全観測値を見せても良いだろうが、今回は1200以上であり、このような見せ方が効果的である。

　1つ注意すべき点は、表示される回帰直線（曲線）の場合、2次関数が使用される。1次関数にフィットさせるためには、`rdrobust()`同様、`p = 1`を指定すれば良い。

```{r}
rdplot(y = df$outcome, x = df$rv, c = 0, p = 1)
```

　また、この回帰直線の場合、カーネル関数は矩形関数である。三角形関数にするためには、更に`kernel = "triangular"`を指定する。また、`x.lab`、`y.lab`、`title`引数でラベルを修正することもできる。

```{r}
rdplot(y = df$outcome, x = df$rv, c = 0, p = 1,
       kernel = "triangular",
       x.label = "Vote Margin in Election t",
       y.label = "Vote Share in Election t+1",
       title = "")
```

　以上の例は、バンド幅を設定せず、全観測値を利用したものである。`rdrobust()`のようにバンド幅を指定することはできないため、`subset`引数を使って使用するデータを制限することができる。たとえば、`rv`が-15より大きく、15より小さいケースのみを使う場合、`subset = (df$rv > -15 & df$rv < 15)`と指定すれば良い。

```{r}
rdplot(y = df$outcome, x = df$rv, c = 0, p = 1,
       kernel = "triangular", 
       subset = (df$rv > -15 & df$rv < 15),
       x.label = "Vote Margin in Election t",
       y.label = "Vote Share in Election t+1",
       title = "")
```

## 仮定の確認

### 交絡要因の連続性

　RDDの重要な仮定の一つとして、交絡要因の連続性がある。交絡要因として考えられる要因が、処置群に割り当てられることでジャンプした場合、観察される処置効果がが処置によるものか、交絡要因のジャンブによるものかが識別できないからだ。今回の例では処置効果が見られていないが、それでもこの仮定は確認する価値がある。処置による効果（$X \rightarrow Y$）と交絡要因による効果（$Z \rightarrow Y$）が両方存在するケースを考えてみよう。もしこの2つの効果の符号が逆である場合、処置効果（$X \rightarrow Y$）が交絡要因による効果（$Z \rightarrow Y$）に相殺される可能性もあるからだ。

　確認する方法は簡単だ。もう一度RDDをするだけだ。ただし、応答変数が得票率（`outcome`）でなく、交絡要因に代わるだけだ。今回は候補者数（`total_cand`）、有効候補者数（`en_cand`）、得票数（`total_votes`）に対してRDDを行ってみよう。

```{r}
assumption_fit1 <- rdrobust(y = df$total_cand, x = df$rv)
assumption_fit2 <- rdrobust(y = df$en_cand, x = df$rv)
assumption_fit3 <- rdrobust(y = df$total_votes, x = df$rv)
```

```{r}
summary(assumption_fit1)
```

```{r}
summary(assumption_fit2)
```

```{r}
summary(assumption_fit3)
```

　いずれも統計的に有意なジャンプは見られない。以上の検定結果から「仮定は満たされている」ことは主張できないものの、「仮定が満たされていないとは言えない」までは主張できるはずだ。

### バランスチェック

　ノンパラメトリックRDDの場合、バンド幅内であれば、処置群と統制群の性質はほぼ同じであると仮定する。つまり、処置変数を除く共変量が処置群と統制群の間において均質であることを意味する。それでは{BalanceR}を使って、候補者数（`total_cand`）、有効候補者数（`en_cand`）、得票数（`total_votes`）が処置群と統制群の間に差があるかを確認してみよう。

```{r}
df |>
  # 処置の有無を示す treat 変数を作成
  mutate(treat = if_else(rv > 0, "yes", "no")) |>
  BalanceR(group = treat,
           cov = total_cand:total_votes) |>
  plot(abs = TRUE) +
  scale_y_discrete(label = c("total_cand" = "Total number of candidates",
                             "en_cand" = "Effective number of candidates",
                             "total_votes" = "Total votes"))
```

　得票数（`total_votes`）の場合、標準化差分が非常に大きいことが分かる。それではバンド幅内のサンプルに限定すればどうだろうか。`filter()`を使って`rv`が-8.064より大きく、8.064より小さいサンプルに絞っってバランスチェックをしてみよう。

```{r}
df |>
  mutate(treat = if_else(rv > 0, "yes", "no")) |>
  filter(rv > -8.064 & rv < 8.064) |>
  BalanceR(group = treat,
           cov = total_cand:total_votes) |>
  plot(abs = TRUE) +
  scale_y_discrete(label = c("total_cand" = "Total number of candidates",
                             "en_cand" = "Effective number of candidates",
                             "total_votes" = "Total votes"))
```

　有効候補者数（`en_cand`）のバランスがむしろ悪くなったものの、他の2つの変数のバランスは改善されていることが分かる。

### 強制変数の操作可能性

　RDDのもう一つの重要な仮定として、閾値周辺において強制変数の操作が行われてはいけない。得票率の差を操作することは極めて困難なので、今回は問題はないと考えられるが、たとえばフランス地方議会選挙のように人口によって制度が変わる場合、特定の選挙制度を採用するために人口を操作することは不可能ではないだろう。

　この仮定を確認、検定する手法がMcCrayの密度検定 (density test)だ (McCray 2006)[^mccray]。簡単に説明すると、強制変数の密度関数が閾値周辺においてジャンプしているか否かを確認する方法である。もし、操作が行われているとしたら、密度関数が断絶するだろう。

[^mccray]: [McCray, Justin. 2008. "Manipulation of the running variable in the regression discontinuity design: A density test," *Journal of Econometrics,* 142(2): 698-714.](https://doi.org/10.1016/j.jeconom.2007.05.005)

　密度検定は{rdd}の`DCdensity()`で簡単に行うことができる。第一引数は強制変数を、`cutpoint`には閾値を指定する（既定値は0であるため、今回は省略可能）。

```{r}
DCdensity(df$rv, cutpoint = 0)
```

　図と長さ1のnumeric型ベクトルが出力されるが[^dcdensity-plot]、図は密度分布を可視化したものであり、数値は「密度関数は連続している」という帰無仮説に対する$p$値である。これが$\alpha$（通常、$\alpha = 0.05$）を下回る場合、帰無仮説は棄却され、密度関数が断絶していると判断できる。つまり、RDDの仮定を満たしていないことを意味する。

[^dcdensity-plot]: 図が不要なら`plot = FALSE`を指定する。

　{rdd}の`DCdensity()`以外にも、密度検定専用のパッケージ{rddenstiy}の`rddensity()`を使うことも可能だ。検定方法は基本的に同じだが、検定の際に使用するパラメーターや標準誤差計算のアルゴリズムが異なるため、結果はやや異なる。使い方は`X`に強制変数を、`c`に閾値を指定すれば良い。他にも十数種類のパラメーターが指定できるが詳細はコンソール上で`?rddensity`を入力し、ヘルプを参照すること。

```{r}
Density_Test <- rddensity(X = df$rv, c = 0)
summary(Density_Test)
```

　密度検定の結果（$p$値）は中間辺りにある`# Robust`行の0.4134だ。ここでも帰無仮説は棄却されず、強制変数の操作が行われているとは言えない。これらの結果を可視化の際は`rdplotdensity()`関数を使う。第一引数は`rddensity()`から得られたオブジェクト名を指定し、`X`には強制変数を指定する。その他の引数についてはヘルプ（コンソール上で`?rdplotdensity`）を参照すること。

```{r}
Density_Plot <- rdplotdensity(Density_Test, X = df$rv, 
                              type = "both", lwd = 1, pwd = 3, pty = 19)
```

　また、要約結果の下段にあるBinomial testsは密度分布に代わるもう一つの検定手法だ。1行目はケースが20個入る範囲と、その中での処置群と統制群の大きさ、そしてその差の検定である。ここでは0.215だが、これは`rv`が-0.215から0.215の間に20個のケースがあるということを意味する。統制群は7ケース、処置群は13ケースである。もし、強制変数の操作が行われなかったのであれば、処置群の割合は0.5になるはずである。右の`P>|T|`列は、$p = 0.5$を帰無仮説とした二項検定における$p$値である。もし、この値が$\alpha$を下回ると、閾値周辺において何らかの操作が行われた可能性があることを示唆する。

　2行目は1行目の幅を2倍に、3行目は1行目の幅を3倍に、...したものである。いずれも$p$値は0.05以上であり、強制変数の操作が行われたとは言えない。