---
title: "差分の差分法"
toc: true
link-external-icon: true
link-external-newwindow: true
code-line-numbers: true
---

## スライド

<a href="../slide/did.html" class="btn btn-primary btn-sm" target="_blank" role="button"><i class="bi bi-window"></i> 新しいタブで開く</a>

```{=html}
<iframe class="slide-deck" src="../slide/did.html" width="100%" style="aspect-ratio: 16 / 9.2;"></iframe>
```

```{r}
#| include: false
knitr::opts_chunk$set(dev       = "ragg_png",
                      dpi       = 300,
                      fig.align = "center",
                      message   = FALSE,
                      warning   = FALSE)
```

## セットアップ

　本日の実習に必要なパッケージとデータを読み込む。

```{r}
pacman::p_load(tidyverse,     # Rの必須パッケージ
               summarytools,  # 記述統計
               modelsummary,  # 推定結果の要約
               estimatr,      # ロバストな回帰分析
               gsynth,        # 一般化SCM
               CausalImpact)  # CausalImpactの実装

did_df <- read_csv("data/did_data5.csv")

did_df
```

　データの詳細はスライドを参照すること。DID推定には時間（年）とカウンティー（郡）の固定効果を投入し、州レベルでクラスタリングした標準誤差を使う予定である。これらの変数を予めfactor化しておこう。factor化した変数は変数名の後ろに`_f`を付けて、新しい列として追加しておく。

```{r}
did_df <- did_df |>
  mutate(county_f = factor(county),
         state_f  = factor(state),
         year_f   = factor(year))

did_df
```

　連続変数（`shooting`から`change_unem_rate`まで）の記述統計量を出力する。ここで一つ注意が必要だ。それは`select()`関数の使い方である。具体的に言えば、使い方そのものは変わらない。問題は、現在、`select()`関数が2つ以上存在するという点だ。最初に読み込んだ{gsynth}パッケージは{MASS}パッケージにも依存しているため、自動的に{MASS}も読み込まれる。この{MASS}にも`select()`関数が存在する。しかも、{gsynth}は{tidyverse}よりも先に読み込まれているので、`select()`のみ書くと、{MASS}の`select()`関数として認識する。したがって、「どのパッケージの`select()`関数か」を具体的に書く必要がある。書き方は`パッケージ名::関数名()`だ。{tidyverse}内には{dplyr}というパッケージがあり、列の抽出に使う`select()`関数はこの{dplyr}が提供しているため、`dplyr::select()`と書く必要がある。

```{r}
did_df |>
  dplyr::select(shooting:change_unem_rate) |>
  descr(stats = c("mean", "sd", "min", "max", "n.valid"),
        transpose = TRUE, order = "p")
```

## Diff-in-Diff

　それでは差分の差分法の実装について紹介する。推定式は以下の通りである。

$$
\mbox{Outcome}_{i, t} = \beta_0 + \beta_1 \mbox{Shooting}_{i, t} + \sum_k \delta_{k, i, t} \mbox{Controls}_{k, i, t} + \lambda_{t} + \omega_{i} + \varepsilon_{i, t}
$$

* $\mbox{Otucome}$: 応答変数
   * `turnout`: 投票率（大統領選挙）
   * `demvote`: 民主党候補者の得票率
* $\mbox{Shooting}$: 処置変数
   * `shooting`: 銃撃事件の発生有無
   * `fatal_shooting`: 死者を伴う銃撃事件の発生有無
   * `non_fatal_shooting`: 死者を伴わない銃撃事件の発生有無
* $\mbox{Controls}$: 統制変数
   * `population`: カウンティーの人口
   * `non_white`: 非白人の割合
   * `change_unem_rate`: 失業率の変化
   * 統制変数あり/なしのモデルを個別に推定
* $\lambda$: 年固定効果
* $\omega$: カウンティー固定効果

応答変数が2種類、処置変数が3種類、共変量の有無でモデルを分けるので、推定するモデルは計12個である。

|モデル  |オブジェクト名|応答変数|処置変数|統制変数|
|:---|:---|:---|:---|:---|
|モデル1 |`did_fit1` |`turnout`|`shooting`          |なし|
|モデル2 |`did_fit2` |`turnout`|`shooting`          |あり|
|モデル3 |`did_fit3` |`turnout`|`fatal_shooting`    |なし|
|モデル4 |`did_fit4` |`turnout`|`fatal_shooting`    |あり|
|モデル5 |`did_fit5` |`turnout`|`non_fatal_shooting`|なし|
|モデル6 |`did_fit6` |`turnout`|`non_fatal_shooting`|あり|
|モデル7 |`did_fit7` |`demvote`|`shooting`          |なし|
|モデル8 |`did_fit8` |`demvote`|`shooting`          |あり|
|モデル9 |`did_fit9` |`demvote`|`fatal_shooting`    |なし|
|モデル10|`did_fit10`|`demvote`|`fatal_shooting`    |あり|
|モデル11|`did_fit11`|`demvote`|`non_fatal_shooting`|なし|
|モデル12|`did_fit12`|`demvote`|`non_fatal_shooting`|あり|

　まずはモデル1を推定し、`did_fit1`という名のオブジェクトとして格納する。基本的には線形回帰分析であるため、`lm()`でも推定はできる。しかし、差分の差分法の場合、通常、クラスター化した頑健な標準誤差（cluster robust standard error）を使う。`lm()`単体ではこれが計算できないため、今回は{estimatr}パッケージが提供する`lm_robust()`関数を使用する。使い方は`lm()`同様、まず回帰式と使用するデータ名を指定する。続いて、固定効果を`fixed_effects`引数で指定する[^estimatr-fe]。書き方は`~固定効果変数1 + 固定効果変数2 + ...`である。回帰式と違って、`~`の左側には変数がないことに注意すること。続いて、`clusters`引数でクラスタリングする変数を指定する。今回は州レベルでクラスタリングするので、`state_f`で良い。最後に標準誤差のタイプを指定するが、デフォルトは`"CR2"`となっている。今回のデータはそれなりの大きさのデータであり、`"CR2"`だと推定時間が非常に長くなる。ここでは推定時間が比較的早い`"stata"`とする。

[^estimatr-fe]: `fixed_effects`引数でなく、回帰式に説明変数として指定しても結果は同じである。しかし、回帰式に書く場合、固定効果の推定値も全て出力され、推定結果が非常に長くなる。しかし、固定効果の推定値は論文内で報告することもない。`fixed_effects`で指定すると、それらの結果は省略される。

```{r}
did_fit1 <- lm_robust(turnout ~ shooting, 
                      data          = did_df, 
                      fixed_effects = ~year_f + county_f,
                      clusters      = state_f,
                      se_type       = "stata")

summary(did_fit1)
```

　処置効果の推定値は`r sprintf("%.3f", coef(did_fit1)[1])`である。これは学校内銃撃事件が発生したカウンティーの場合、大統領選挙において投票率が約`r sprintf("%.3f", coef(did_fit1)[1])`%p低下することを意味する。しかし、標準誤差がかなり大きく、統計的有意な結果ではない。つまり、「学校内銃撃事件が投票率を上げる（or 下げる）とは言えない」と解釈できる。決して「学校内銃撃事件が投票率を上げない（or 下げない）」と解釈しないこと。

　共変量を投入してみたらどうだろうか。たとえば、人口は自治体の都市化程度を表すこともあるので、都市化程度と投票率には関係があると考えられる。また、人口が多いと自然に事件が発生する確率もあがるので、交絡要因として考えられる。人種や失業率も同様であろう。ここではカウンティーの人口（`population`）、非白人の割合（`non_white`）、失業率の変化（`change_unem_rate`）を統制変数として投入し、`did_fit2`という名で格納する。

```{r}
did_fit2 <- lm_robust(turnout ~ shooting + 
                        population + non_white + change_unem_rate, 
                      data          = did_df, 
                      fixed_effects = ~year_f + county_f,
                      clusters      = state_f,
                      se_type       = "stata")

summary(did_fit2)
```

　処置効果の推定値は`r sprintf("%.3f", coef(did_fit2)[1])`である。これは他の条件が同じ場合、学校内銃撃事件が発生したカウンティーは大統領選挙において投票率が約`r sprintf("%.3f", coef(did_fit2)[1])`%p低下することを意味する。ちなみに、`e-01`は$\times 10^{-1}$を、`e-06`は$\times 10^{-6}$を、`e+01`は$\times 10^{1}$意味する。今回も統計的に非有意な結果が得られている。

　これまでの処置変数は死者の有無と関係なく、学校内銃撃事件が発生したか否かだった。もしかしたら、死者を伴う銃撃事件が発生した場合、その効果が大きいかも知れない。したがって、これからは処置変数を死者を伴う学校内銃撃事件の発生有無（`fatal_shooting`）、死者を伴わない学校内銃撃事件の発生有無（`non_fatal_shooting`）に変えてもう一度推定してみよう。

```{r}
did_fit3 <- lm_robust(turnout ~ fatal_shooting, 
                      data          = did_df, 
                      fixed_effects = ~year_f + county_f,
                      clusters      = state_f,
                      se_type       = "stata")

did_fit4 <- lm_robust(turnout ~ fatal_shooting + 
                        population + non_white + change_unem_rate, 
                      data          = did_df, 
                      fixed_effects = ~year_f + county_f,
                      clusters      = state_f,
                      se_type       = "stata")

did_fit5 <- lm_robust(turnout ~ non_fatal_shooting, 
                      data          = did_df, 
                      fixed_effects = ~year_f + county_f,
                      clusters      = state_f,
                      se_type       = "stata")

did_fit6 <- lm_robust(turnout ~ non_fatal_shooting + 
                        population + non_white + change_unem_rate, 
                      data          = did_df, 
                      fixed_effects = ~year_f + county_f,
                      clusters      = state_f,
                      se_type       = "stata")
```

　これまで推定してきた6つのモデルを比較してみよう。

```{r}
modelsummary(list(did_fit1, did_fit2, did_fit3, 
                  did_fit4, did_fit5, did_fit6))
```

　いずれのモデルも統計的に有意な処置効果は確認されていない。これらの結果を表として報告するには紙がもったいない気もする。これらの結果はOnline Appendixに回し、本文中には処置効果の点推定値と95%信頼区間を示せば良いだろう。

　{broom}の`tidy()`関数で推定結果のみを抽出し、それぞれオブジェクトとして格納しておこう。

```{r}
tidy_fit1 <- tidy(did_fit1, conf.int = TRUE)
tidy_fit2 <- tidy(did_fit2, conf.int = TRUE)
tidy_fit3 <- tidy(did_fit3, conf.int = TRUE)
tidy_fit4 <- tidy(did_fit4, conf.int = TRUE)
tidy_fit5 <- tidy(did_fit5, conf.int = TRUE)
tidy_fit6 <- tidy(did_fit6, conf.int = TRUE)
```

　全て確認する必要はないので、`tidy_fit1`のみを確認してみる。

```{r}
tidy_fit1
```

　以上の6つの表形式オブジェクトを一つの表としてまとめる。それぞれのオブジェクトには`共変量の有無_処置変数の種類`の名前を付けよう。共変量なしのモデルは`M1`、ありのモデルは`M2`とする。処置変数は`shooting`の場合は`Tr1`、`fatal_shooting`は`Tr2`、`non_fatal_shooting`は`Tr3`とする。

```{r}
did_est1 <- bind_rows(list("M1_Tr1" = tidy_fit1,
                           "M2_Tr1" = tidy_fit2,
                           "M1_Tr2" = tidy_fit3,
                           "M2_Tr2" = tidy_fit4,
                           "M1_Tr3" = tidy_fit5,
                           "M2_Tr3" = tidy_fit6),
                      .id = "Model")

did_est1
```

　続いて、処置効果のみを抽出する。処置効果は`term`列の値が`"shooting"`、`"fatal_shooting"`、`"non_fatal_shooting"`のいずれかと一致する行であるため、`filter()`関数を使用する。

```{r}
did_est1 <- did_est1 |>
  filter(term %in% c("shooting", "fatal_shooting", "non_fatal_shooting"))

did_est1
```

　ちなみに`grepl()`関数を使うと、`"shooting"`が含まれる行を抽出することもできる。以下のコードは上記のコードと同じ機能をする。

```{r}
#| eval: false
did_est1 <- did_est1 |>
  filter(grepl("shooting", term))
```

　つづいて、`Model`列を`Model`と`Treat`列へ分割する。

```{r}
did_est1 <- did_est1 |>
  separate(col  = Model,
           into = c("Model", "Treat"),
           sep  = "_")

did_est1
```

　可視化に入る前に`Model`列と`Treat`列の値を修正する。`Model`列の値が`"M1"`なら`"County-Year FE"`に、それ以外なら`"County-Year FE + Covariates"`とリコーディングする。戻り値が2種類だから`if_else()`を使う。`Treat`列の場合、戻り値が3つなので、`recode()`か`case_when()`を使う。ここでは`recode()`を使ってリコーディングする。最後に`Model`と`Treat`を表示順番でfactor化し（`fct_inorder()`）、更に順番を逆転する（`fct_rev()`）。

```{r}
did_est1 <- did_est1 |>
  mutate(Model = if_else(Model == "M1",
                           "County-Year FE", 
                           "County-Year FE + Covariates"),
         Treat = recode(Treat,
                        "Tr1" = "Any Shooting (t-1)",
                        "Tr2" = "Fatal Shooting (t-1)",
                        "Tr3" = "Nonfatal Shooting (t-1)"),
         Model = fct_rev(fct_inorder(Model)),
         Treat = fct_rev(fct_inorder(Treat)))

did_est1
```

　それでは{ggplot2}を使ってpoint-rangeプロットを作成してみよう。

```{r}
#| fig-width: 9
#| fig-height: 5
did_est1 |>
  ggplot() +
  # x = 0の箇所に垂直線を引く。垂直線は破線（linetype = 2）とする。
  geom_vline(xintercept = 0, linetype = 2) +
  geom_pointrange(aes(x = estimate, xmin = conf.low, xmax = conf.high,
                      y = Treat, color = Model),
                  position = position_dodge2(1/2)) +
  labs(x = "Change in Turnout (%p)", y = "", color = "") +
  # 色を指定する。
  # Modelの値が County-Year FE なら黒、
  # County-Year FE + Covariates ならグレー、
  scale_color_manual(values = c("County-Year FE" = "black", 
                                "County-Year FE + Covariates" = "gray50")) +
  # 横軸の下限と上限を-10〜10とする。
  coord_cartesian(xlim = c(-10, 10)) +
  theme_bw(base_size = 12) +
  theme(legend.position = "bottom")
```

　元の論文を見ると、点の上に点推定値が書かれているが、私たちもこれを真似してみよう。文字列をプロットするレイヤーは`geom_text()`と`geom_label()`、`annotate()`があるが、ここでは`geom_text()`を使用する。文字列が表示される横軸上の位置（`x`）と縦軸上の位置（`y`）、そして出力する文字列（`label`）をマッピングする。点推定値は3桁まで出力したいので、`sprintf()`を使って、3桁に丸める。ただし、これだけだと点と文字が重なってしまう。`vjust`を`-0.75`にすることで、出力する文字列を点の位置を上の方向へ若干ずらすことができる。

```{r}
#| fig-width: 9
#| fig-height: 5
did_est1 |>
  ggplot() +
  geom_vline(xintercept = 0, linetype = 2) +
  geom_pointrange(aes(x = estimate, xmin = conf.low, xmax = conf.high,
                      y = Treat, color = Model),
                  position = position_dodge2(1/2)) +
  geom_text(aes(x = estimate, y = Treat, color = Model, 
                label = sprintf("%.3f", estimate)),
            position = position_dodge2(1/2),
            vjust = -0.75) +
  labs(x = "Change in Turnout (%p)", y = "", color = "") +
  scale_color_manual(values = c("County-Year FE" = "black", 
                                "County-Year FE + Covariates" = "gray50")) +
  coord_cartesian(xlim = c(-10, 10)) +
  theme_bw(base_size = 12) +
  theme(legend.position = "bottom")
```

　ちなみにこのコードを見ると、`geom_pointrange()`と`geom_text()`は`x`、`y`、`color`を共有しているので、`ggplot()`内でマッピングすることもできる。

```{r}
#| eval: false
did_est1 |>
  ggplot(aes(x = estimate, y = Treat, color = Model)) +
  geom_vline(xintercept = 0, linetype = 2) +
  geom_pointrange(aes(xmin = conf.low, xmax = conf.high),
                  position = position_dodge2(1/2)) +
  geom_text(aes(label = sprintf("%.3f", estimate)),
            position = position_dodge2(1/2),
            vjust = -0.75) +
  labs(x = "Change in Turnout (%p)", y = "", color = "") +
  scale_color_manual(values = c("County-Year FE" = "black", 
                                "County-Year FE + Covariates" = "gray50")) +
  coord_cartesian(xlim = c(-10, 10)) +
  theme_bw(base_size = 12) +
  theme(legend.position = "bottom")
```

```{r}
did_fit7 <- lm_robust(demvote ~ shooting, 
                      data          = did_df, 
                      fixed_effects = ~year_f + county_f,
                      clusters      = state_f,
                      se_type       = "stata")

did_fit8 <- lm_robust(demvote ~ shooting + 
                        population + non_white + change_unem_rate, 
                      data          = did_df, 
                      fixed_effects = ~year_f + county_f,
                      clusters      = state_f,
                      se_type       = "stata")

did_fit9 <- lm_robust(demvote ~ fatal_shooting, 
                      data          = did_df, 
                      fixed_effects = ~year_f + county_f,
                      clusters      = state_f,
                      se_type       = "stata")

did_fit10 <- lm_robust(demvote ~ fatal_shooting + 
                         population + non_white + change_unem_rate, 
                       data          = did_df, 
                       fixed_effects = ~year_f + county_f,
                       clusters      = state_f,
                       se_type       = "stata")

did_fit11 <- lm_robust(demvote ~ non_fatal_shooting, 
                       data          = did_df, 
                       fixed_effects = ~year_f + county_f,
                       clusters      = state_f,
                       se_type       = "stata")

did_fit12 <- lm_robust(demvote ~ non_fatal_shooting + 
                         population + non_white + change_unem_rate, 
                       data          = did_df, 
                       fixed_effects = ~year_f + county_f,
                       clusters      = state_f,
                       se_type       = "stata")
```

```{r}
modelsummary(list(did_fit7, did_fit8, did_fit9, 
                  did_fit10, did_fit11, did_fit12))
```

```{r}
tidy_fit7  <- tidy(did_fit7)
tidy_fit8  <- tidy(did_fit8)
tidy_fit9  <- tidy(did_fit9)
tidy_fit10 <- tidy(did_fit10)
tidy_fit11 <- tidy(did_fit11)
tidy_fit12 <- tidy(did_fit12)

did_est2 <- bind_rows(list("M1_Tr1" = tidy_fit7,
                           "M2_Tr1" = tidy_fit8,
                           "M1_Tr2" = tidy_fit9,
                           "M2_Tr2" = tidy_fit10,
                           "M1_Tr3" = tidy_fit11,
                           "M2_Tr3" = tidy_fit12),
                      .id = "Model")

did_est2
```

```{r}
did_est2 <- did_est2 |>
  filter(grepl("shooting", term))

did_est2
```

```{r}
did_est2 <- did_est2 |>
  separate(col  = Model,
           into = c("Model", "Treat"),
           sep  = "_")

did_est2
```

```{r}
did_est2 <- did_est2 |>
  mutate(Model = if_else(Model == "M1",
                           "County-Year FE", 
                           "County-Year FE + Covariates"),
         Treat = recode(Treat,
                        "Tr1" = "Any Shooting (t-1)",
                        "Tr2" = "Fatal Shooting (t-1)",
                        "Tr3" = "Nonfatal Shooting (t-1)"),
         Model = fct_rev(fct_inorder(Model)),
         Treat = fct_rev(fct_inorder(Treat)))

did_est2
```

```{r}
#| fig-width: 9
#| fig-height: 5
did_est2 |>
  ggplot() +
  geom_vline(xintercept = 0, linetype = 2) +
  geom_pointrange(aes(x = estimate, xmin = conf.low, xmax = conf.high,
                      y = Treat, color = Model),
                  position = position_dodge2(1/2)) +
  geom_text(aes(x = estimate, y = Treat, color = Model, 
                label = sprintf("%.3f", estimate)),
            position = position_dodge2(1/2),
            vjust = -0.75) +
  labs(x = "Change in Democratic Vote Share (%p)", y = "", color = "") +
  scale_color_manual(values = c("County-Year FE" = "black", 
                                "County-Year FE + Covariates" = "gray50")) +
  coord_cartesian(xlim = c(-10, 10)) +
  theme_bw(base_size = 12) +
  theme(legend.position = "bottom")
```

```{r}
did_est <- bind_rows(list("Out1" = did_est1,
                          "Out2" = did_est2),
                     .id = "Outcome")

did_est
```

```{r}
did_est <- did_est |>
  mutate(Outcome = if_else(Outcome == "Out1",
                           "Change in Turnout (%p)",
                           "Change in Democratic Vote Share (%p)"),
         Outcome = fct_inorder(Outcome))

did_est
```

```{r}
#| fig-width: 9
#| fig-height: 5
did_est |>
  ggplot() +
  geom_vline(xintercept = 0, linetype = 2) +
  geom_pointrange(aes(x = estimate, xmin = conf.low, xmax = conf.high,
                      y = Treat, color = Model),
                  position = position_dodge2(1/2)) +
  geom_text(aes(x = estimate, y = Treat, color = Model, 
                label = sprintf("%.3f", estimate)),
            position = position_dodge2(1/2),
            vjust = -0.75) +
  labs(x = "Treatment Effects", y = "", color = "") +
  scale_color_manual(values = c("County-Year FE" = "black", 
                                "County-Year FE + Covariates" = "gray50")) +
  coord_cartesian(xlim = c(-10, 10)) +
  facet_wrap(~Outcome, ncol = 2) +
  theme_bw(base_size = 12) +
  theme(legend.position = "bottom")
```

## SCM

```{r}
scm_df <- read_csv("data/did_data6.csv")

scm_df
```

```{r}
scm_df <- scm_df |>
  mutate(Election   = factor(Election),
         PrefCode   = factor(PrefCode),
         PrefName_E = fct_inorder(PrefName_E),
         PrefName_J = fct_inorder(PrefName_J))
```

```{r}
scm_df |>
  descr(stats = c("mean", "sd", "min", "max", "n.valid"),
        transpose = TRUE, order = "p")
```

## CausalImpact

